name: Build

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

env:
  ZIP_NAME: blender_dds_addon

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.check-tag.outputs.version }}
      url: ${{ steps.create-release.outputs.upload_url }}
    steps:
    
      - name: Check tag
        id: check-tag
        run: |
          if [[ ${{ github.ref }} == refs/tags/v* ]]; then
            VERSION=_$(echo ${{ github.ref }} | sed -e "s#refs/tags/##g")
          else
            VERSION=""
          fi
          echo "::set-output name=version::$VERSION"
        shell: bash
      
      - name: Create Release Draft
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: |
            Changelog
            - First Change
            - Second Change
          draft: true
          prerelease: false

  build:
    strategy:
      matrix:
        os: [windows-2022, ubuntu-20.04, macos-11]
    runs-on: ${{ matrix.os }}
    needs: setup
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: get sal.h (for Unix)
        if: runner.os!='Windows'
        run: bash external/Texconv-Custom-DLL/shell_scripts/get_sal.sh
        
      - name: build dll (for Windows)
        if: runner.os=='Windows'
        run: |
          cd external/Texconv-Custom-DLL/batch_files
          ./build_small.bat
      
      - name: build shared library (for Unix)
        if: runner.os!='Windows'
        run: |
          cd external/Texconv-Custom-DLL/shell_scripts
          bash build_small.sh

      - name: Copy files
        run: |
          mkdir -p ../release
          cp -r addons/${{ env.ZIP_NAME }} ../release
          cp changelog.txt ../release/${{ env.ZIP_NAME }}
          cp LICENSE ../release/${{ env.ZIP_NAME }}
          cp external/Texconv-Custom-DLL/*texconv.* ../release/${{ env.ZIP_NAME }}/directx
        shell: bash
      
      - name: Archive Release
        uses: thedoctor0/zip-release@master
        with:
          directory: '../release'
          type: 'zip'
          filename: '${{ env.ZIP_NAME }}.zip'
          exclusions: '*.git* .gitignore'

      - name: Upload Release Asset
        id: upload-release-asset-python
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.setup.outputs.url }}
          asset_path: ../release/${{ env.ZIP_NAME }}.zip
          asset_name: ${{ env.ZIP_NAME }}${{ needs.setup.outputs.version }}_${{ runner.os }}.zip
          asset_content_type: application/zip
